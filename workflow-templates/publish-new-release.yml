name: "Publish new release"

on:
  pull_request:
    branches: [master]
    types: [closed]

jobs:
  release:
    name: Publish new release
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true # only merged pull requests must trigger this job
    env:
      # TODO add all required environment variables

    steps:
      - name: Extract version from branch name (for release branches)
        if: startsWith(github.event.pull_request.head.ref, 'release/')
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          VERSION=${BRANCH_NAME#release/}
          echo "::set-env name=RELEASE_VERSION::$VERSION"
      - name: Extract version from branch name (for hotfix branches)
        if: startsWith(github.event.pull_request.head.ref, 'hotfix/')
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          VERSION=${BRANCH_NAME#hotfix/}
          echo "::set-env name=RELEASE_VERSION::$VERSION"
      # Unfortunately, GitHub doesn't trigger events for actions that have been taken by a GitHub action.
      # This means we cannot use `Fixes #issue_number.` in the body of the PR to close the release issue after the branch is merged.
      # Hence, we close it here "manually"
      - name: Close release issue
        run: |
          RELEASE_ISSUE_URL=$(curl -H "Authorization: token ${{ secrets.ROBOT_PERSONAL_ACCESS_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/issues\?labels=release\&state=open | jq -r '.[0].url')
          curl \
            -X PATCH \
            -H 'Accept: application/vnd.github.v3+json' \
            -H "Authorization: token ${{ secrets.ROBOT_PERSONAL_ACCESS_TOKEN }}" \
            -H "Content-Type: application/json" \
            $RELEASE_ISSUE_URL \
            -d '{"state":"closed"}'

      - name: Create Release
        id: create_release
        uses: thomaseizinger/create-release@1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.ROBOT_PERSONAL_ACCESS_TOKEN }}
        with:
          target_commitish: ${{ github.event.pull_request.merge_commit_sha }}
          tag_name: ${{ env.RELEASE_VERSION }}
          name: ${{ env.RELEASE_VERSION }}
          draft: false
          prerelease: false

      - name: Merge release into develop branch
        uses: thomaseizinger/create-pull-request@1.0.0
        with:
          GITHUB_TOKEN: ${{ secrets.ROBOT_PERSONAL_ACCESS_TOKEN }}
          head: ${{ github.event.pull_request.head.ref }}
          base: develop
          title: Merge release ${{ env.RELEASE_VERSION }} into develop branch
          body: |
            This PR merges the release branch for ${{ env.RELEASE_VERSION }} back into develop.
            This happens to ensure that the updates that happend on the release branch, i.e. CHANGELOG and manifest updates are also present on the dev branch.
      # if needed, you can checkout the latest master here, build artifacts and publish / deploy them somewhere
      # the create-release action has an output `upload_url` output that you can use to upload assets

      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.ROBOT_PERSONAL_ACCESS_TOKEN }}
          submodules: recursive
          fetch-depth: 0
      - name: GitHub Slug
        uses: rlespinasse/github-slug-action@2.1.0

      # TODO replace this with actions for setting up project build environment
      - uses: borales/actions-yarn@v2.0.0

      - name: Cache dependencies
        id: cache_dependencies
        uses: actions/cache@v2
        with:
          # TODO: Dependency paths go here
          path: |
            ~/example/path
          key: dependencies-${{ github.sha }}

      - name: Cache build
        id: cache_release_build
        uses: actions/cache@v2
        with:
          # TODO: Build output paths go here
          path: |
            ~/example/path
          key: release-build-${{ github.sha }}

      - name: Build
        if: steps.cache_release_build.outputs.cache-hit != 'true'
        uses: ./.github/actions/build

      - name: Package Release
        id: package
        uses: ./.github/actions/package-release

      - run: echo "ASSET_NAME=$(basename $ASSET_PATH)" >> $GITHUB_ENV
        env:
          ASSET_PATH: ${{ steps.package.outputs.asset_path }}

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ROBOT_PERSONAL_ACCESS_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.package.outputs.asset_path }}
          asset_name: ${{ env.ASSET_NAME }}
          asset_content_type: application/octet-stream

      - name: Deploy release
        uses: ./.github/actions/deploy-release
